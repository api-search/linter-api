{"version":3,"file":"index.cjs.js","sources":["../../src/index.js"],"sourcesContent":["const CONDITIONAL_EXP = 'ConditionalExpression';\n\nexport default {\n\tname: 'ternary',\n\n\tinit(jsep) {\n\t\t// Ternary expression: test ? consequent : alternate\n\t\tjsep.hooks.add('after-expression', function gobbleTernary(env) {\n\t\t\tif (env.node && this.code === jsep.QUMARK_CODE) {\n\t\t\t\tthis.index++;\n\t\t\t\tconst test = env.node;\n\t\t\t\tconst consequent = this.gobbleExpression();\n\n\t\t\t\tif (!consequent) {\n\t\t\t\t\tthis.throwError('Expected expression');\n\t\t\t\t}\n\n\t\t\t\tthis.gobbleSpaces();\n\n\t\t\t\tif (this.code === jsep.COLON_CODE) {\n\t\t\t\t\tthis.index++;\n\t\t\t\t\tconst alternate = this.gobbleExpression();\n\n\t\t\t\t\tif (!alternate) {\n\t\t\t\t\t\tthis.throwError('Expected expression');\n\t\t\t\t\t}\n\t\t\t\t\tenv.node = {\n\t\t\t\t\t\ttype: CONDITIONAL_EXP,\n\t\t\t\t\t\ttest,\n\t\t\t\t\t\tconsequent,\n\t\t\t\t\t\talternate,\n\t\t\t\t\t};\n\t\t\t\t}\n\t\t\t\t// if binary operator is custom-added (i.e. object plugin), then correct it to a ternary node:\n\t\t\t\t// Note: BinaryExpressions can be stacked (similar to 1 + 1 + 1), so we have to collapse the stack\n\t\t\t\t// Only do one level at a time so we can unroll as we pop the ternary stack\n\t\t\t\telse if (test.operator === ':') {\n\t\t\t\t\t// this happens when the alternate is a ternary\n\t\t\t\t\tif (!consequent.right) {\n\t\t\t\t\t\tthis.throwError('Expected :');\n\t\t\t\t\t}\n\t\t\t\t\tconst node = findLastBinaryNode(consequent);\n\t\t\t\t\ttest.right = {\n\t\t\t\t\t\ttype: CONDITIONAL_EXP,\n\t\t\t\t\t\ttest: test.right,\n\t\t\t\t\t\tconsequent: node.left,\n\t\t\t\t\t\talternate: node === consequent ? node.right : {\n\t\t\t\t\t\t\t// temporary values because we still have to wait to pop the consequent...\n\t\t\t\t\t\t\toperator: ':',\n\t\t\t\t\t\t\tleft: node.right,\n\t\t\t\t\t\t\tright: consequent.right,\n\t\t\t\t\t\t},\n\t\t\t\t\t};\n\t\t\t\t\tenv.node = test;\n\t\t\t\t}\n\t\t\t\telse if (consequent.operator === ':') {\n\t\t\t\t\tconvertBinaryToConditional(findLastBinaryNode(consequent), test);\n\t\t\t\t\tenv.node = consequent;\n\t\t\t\t}\n\t\t\t\telse if (consequent.alternate) {\n\t\t\t\t\t// cleanup the temporary placeholder we made, now that we have the consequent\n\t\t\t\t\tlet alternate = consequent.alternate;\n\t\t\t\t\twhile (alternate.alternate) {\n\t\t\t\t\t\talternate = alternate.alternate;\n\t\t\t\t\t}\n\t\t\t\t\tenv.node = {\n\t\t\t\t\t\ttype: CONDITIONAL_EXP,\n\t\t\t\t\t\ttest,\n\t\t\t\t\t\tconsequent,\n\t\t\t\t\t\talternate: alternate.right,\n\t\t\t\t\t};\n\t\t\t\t\tdelete alternate.operator;\n\t\t\t\t\tdelete alternate.right;\n\t\t\t\t\tObject.assign(alternate, alternate.left);\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tthis.throwError('Expected :');\n\t\t\t\t}\n\n\t\t\t\t// ? and : precedence are before '||' (which defaults to 1)\n\t\t\t\t// object plugin sets : precedence to 0.95, so check for less than that\n\t\t\t\t// (which would capture assignment operators, which the plugin sets at 0.9)\n\t\t\t\tif (env.node.test && env.node.test.operator && jsep.binary_ops[env.node.test.operator] < 0.95) {\n\t\t\t\t\tconst node = env.node;\n\t\t\t\t\tenv.node = node.test;\n\t\t\t\t\tenv.node.right = {\n\t\t\t\t\t\ttype: CONDITIONAL_EXP,\n\t\t\t\t\t\ttest: node.test.right,\n\t\t\t\t\t\tconsequent: node.consequent,\n\t\t\t\t\t alternate: node.alternate,\n\t\t\t\t\t};\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\t\t/**\n\t\t * @param {jsep.Expression} node\n\t\t * @returns {jsep.Expression}\n\t\t */\n\t\tfunction findLastBinaryNode(node) {\n\t\t\twhile (node.left && node.left.operator === ':') {\n\t\t\t\tnode = node.left;\n\t\t\t}\n\t\t\treturn node;\n\t\t}\n\n\t\t/**\n\t\t * @param {jsep.BinaryExpression} node\n\t\t * @param {jsep.Expression} test\n\t\t * @returns {jsep.ConditionalExpression}\n\t\t */\n\t\tfunction convertBinaryToConditional(node, test) {\n\t\t\tnode.type = CONDITIONAL_EXP;\n\t\t\tnode.test = test;\n\t\t\tnode.consequent = node.left;\n\t\t\tnode.alternate = node.right;\n\t\t\tdelete node.operator;\n\t\t\tdelete node.left;\n\t\t\tdelete node.right;\n\t\t}\n\t},\n};\n"],"names":[],"mappings":"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"}