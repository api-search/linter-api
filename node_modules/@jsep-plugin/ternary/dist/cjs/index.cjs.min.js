"use strict";const e="ConditionalExpression";var t={name:"ternary",init(t){function o(e){for(;e.left&&":"===e.left.operator;)e=e.left;return e}t.hooks.add("after-expression",(function(r){if(r.node&&this.code===t.QUMARK_CODE){this.index++;const n=r.node,s=this.gobbleExpression();if(s||this.throwError("Expected expression"),this.gobbleSpaces(),this.code===t.COLON_CODE){this.index++;const e=this.gobbleExpression();e||this.throwError("Expected expression"),r.node={type:"ConditionalExpression",test:n,consequent:s,alternate:e}}else if(":"===n.operator){s.right||this.throwError("Expected :");const e=o(s);n.right={type:"ConditionalExpression",test:n.right,consequent:e.left,alternate:e===s?e.right:{operator:":",left:e.right,right:s.right}},r.node=n}else if(":"===s.operator)!function(t,o){t.type=e,t.test=o,t.consequent=t.left,t.alternate=t.right,delete t.operator,delete t.left,delete t.right}(o(s),n),r.node=s;else if(s.alternate){let t=s.alternate;for(;t.alternate;)t=t.alternate;r.node={type:e,test:n,consequent:s,alternate:t.right},delete t.operator,delete t.right,Object.assign(t,t.left)}else this.throwError("Expected :");if(r.node.test&&r.node.test.operator&&t.binary_ops[r.node.test.operator]<.95){const t=r.node;r.node=t.test,r.node.right={type:e,test:t.test.right,consequent:t.consequent,alternate:t.alternate}}}}))}};module.exports=t;
//# sourceMappingURL=index.cjs.min.js.map
