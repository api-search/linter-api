{"version":3,"file":"index.iife.min.js","sources":["../../src/index.js"],"sourcesContent":["const CONDITIONAL_EXP = 'ConditionalExpression';\n\nexport default {\n\tname: 'ternary',\n\n\tinit(jsep) {\n\t\t// Ternary expression: test ? consequent : alternate\n\t\tjsep.hooks.add('after-expression', function gobbleTernary(env) {\n\t\t\tif (env.node && this.code === jsep.QUMARK_CODE) {\n\t\t\t\tthis.index++;\n\t\t\t\tconst test = env.node;\n\t\t\t\tconst consequent = this.gobbleExpression();\n\n\t\t\t\tif (!consequent) {\n\t\t\t\t\tthis.throwError('Expected expression');\n\t\t\t\t}\n\n\t\t\t\tthis.gobbleSpaces();\n\n\t\t\t\tif (this.code === jsep.COLON_CODE) {\n\t\t\t\t\tthis.index++;\n\t\t\t\t\tconst alternate = this.gobbleExpression();\n\n\t\t\t\t\tif (!alternate) {\n\t\t\t\t\t\tthis.throwError('Expected expression');\n\t\t\t\t\t}\n\t\t\t\t\tenv.node = {\n\t\t\t\t\t\ttype: CONDITIONAL_EXP,\n\t\t\t\t\t\ttest,\n\t\t\t\t\t\tconsequent,\n\t\t\t\t\t\talternate,\n\t\t\t\t\t};\n\t\t\t\t}\n\t\t\t\t// if binary operator is custom-added (i.e. object plugin), then correct it to a ternary node:\n\t\t\t\t// Note: BinaryExpressions can be stacked (similar to 1 + 1 + 1), so we have to collapse the stack\n\t\t\t\t// Only do one level at a time so we can unroll as we pop the ternary stack\n\t\t\t\telse if (test.operator === ':') {\n\t\t\t\t\t// this happens when the alternate is a ternary\n\t\t\t\t\tif (!consequent.right) {\n\t\t\t\t\t\tthis.throwError('Expected :');\n\t\t\t\t\t}\n\t\t\t\t\tconst node = findLastBinaryNode(consequent);\n\t\t\t\t\ttest.right = {\n\t\t\t\t\t\ttype: CONDITIONAL_EXP,\n\t\t\t\t\t\ttest: test.right,\n\t\t\t\t\t\tconsequent: node.left,\n\t\t\t\t\t\talternate: node === consequent ? node.right : {\n\t\t\t\t\t\t\t// temporary values because we still have to wait to pop the consequent...\n\t\t\t\t\t\t\toperator: ':',\n\t\t\t\t\t\t\tleft: node.right,\n\t\t\t\t\t\t\tright: consequent.right,\n\t\t\t\t\t\t},\n\t\t\t\t\t};\n\t\t\t\t\tenv.node = test;\n\t\t\t\t}\n\t\t\t\telse if (consequent.operator === ':') {\n\t\t\t\t\tconvertBinaryToConditional(findLastBinaryNode(consequent), test);\n\t\t\t\t\tenv.node = consequent;\n\t\t\t\t}\n\t\t\t\telse if (consequent.alternate) {\n\t\t\t\t\t// cleanup the temporary placeholder we made, now that we have the consequent\n\t\t\t\t\tlet alternate = consequent.alternate;\n\t\t\t\t\twhile (alternate.alternate) {\n\t\t\t\t\t\talternate = alternate.alternate;\n\t\t\t\t\t}\n\t\t\t\t\tenv.node = {\n\t\t\t\t\t\ttype: CONDITIONAL_EXP,\n\t\t\t\t\t\ttest,\n\t\t\t\t\t\tconsequent,\n\t\t\t\t\t\talternate: alternate.right,\n\t\t\t\t\t};\n\t\t\t\t\tdelete alternate.operator;\n\t\t\t\t\tdelete alternate.right;\n\t\t\t\t\tObject.assign(alternate, alternate.left);\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tthis.throwError('Expected :');\n\t\t\t\t}\n\n\t\t\t\t// ? and : precedence are before '||' (which defaults to 1)\n\t\t\t\t// object plugin sets : precedence to 0.95, so check for less than that\n\t\t\t\t// (which would capture assignment operators, which the plugin sets at 0.9)\n\t\t\t\tif (env.node.test && env.node.test.operator && jsep.binary_ops[env.node.test.operator] < 0.95) {\n\t\t\t\t\tconst node = env.node;\n\t\t\t\t\tenv.node = node.test;\n\t\t\t\t\tenv.node.right = {\n\t\t\t\t\t\ttype: CONDITIONAL_EXP,\n\t\t\t\t\t\ttest: node.test.right,\n\t\t\t\t\t\tconsequent: node.consequent,\n\t\t\t\t\t alternate: node.alternate,\n\t\t\t\t\t};\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\t\t/**\n\t\t * @param {jsep.Expression} node\n\t\t * @returns {jsep.Expression}\n\t\t */\n\t\tfunction findLastBinaryNode(node) {\n\t\t\twhile (node.left && node.left.operator === ':') {\n\t\t\t\tnode = node.left;\n\t\t\t}\n\t\t\treturn node;\n\t\t}\n\n\t\t/**\n\t\t * @param {jsep.BinaryExpression} node\n\t\t * @param {jsep.Expression} test\n\t\t * @returns {jsep.ConditionalExpression}\n\t\t */\n\t\tfunction convertBinaryToConditional(node, test) {\n\t\t\tnode.type = CONDITIONAL_EXP;\n\t\t\tnode.test = test;\n\t\t\tnode.consequent = node.left;\n\t\t\tnode.alternate = node.right;\n\t\t\tdelete node.operator;\n\t\t\tdelete node.left;\n\t\t\tdelete node.right;\n\t\t}\n\t},\n};\n"],"names":["CONDITIONAL_EXP","name","init","jsep","findLastBinaryNode","node","left","operator","hooks","add","env","this","code","QUMARK_CODE","index","test","consequent","gobbleExpression","throwError","gobbleSpaces","COLON_CODE","alternate","type","right","convertBinaryToConditional","Object","assign","binary_ops"],"mappings":"kCAAA,MAAMA,EAAkB,8BAET,CACdC,KAAM,UAENC,KAAKC,GA8FJ,SAASC,EAAmBC,GAC3B,KAAOA,EAAKC,MAA+B,MAAvBD,EAAKC,KAAKC,UAC7BF,EAAOA,EAAKC,KAEb,OAAOD,EAhGRF,EAAKK,MAAMC,IAAI,oBAAoB,SAAuBC,GACzD,GAAIA,EAAIL,MAAQM,KAAKC,OAAST,EAAKU,YAAa,CAC/CF,KAAKG,QACL,MAAMC,EAAOL,EAAIL,KACXW,EAAaL,KAAKM,mBAQxB,GANKD,GACJL,KAAKO,WAAW,uBAGjBP,KAAKQ,eAEDR,KAAKC,OAAST,EAAKiB,WAAY,CAClCT,KAAKG,QACL,MAAMO,EAAYV,KAAKM,mBAElBI,GACJV,KAAKO,WAAW,uBAEjBR,EAAIL,KAAO,CACViB,KAAMtB,EACNe,KAAAA,EACAC,WAAAA,EACAK,UAAAA,QAMG,GAAsB,MAAlBN,EAAKR,SAAkB,CAE1BS,EAAWO,OACfZ,KAAKO,WAAW,cAEjB,MAAMb,EAAOD,EAAmBY,GAChCD,EAAKQ,MAAQ,CACZD,KAAMtB,EACNe,KAAMA,EAAKQ,MACXP,WAAYX,EAAKC,KACjBe,UAAWhB,IAASW,EAAaX,EAAKkB,MAAQ,CAE7ChB,SAAU,IACVD,KAAMD,EAAKkB,MACXA,MAAOP,EAAWO,QAGpBb,EAAIL,KAAOU,OAEP,GAA4B,MAAxBC,EAAWT,UAwDtB,SAAoCF,EAAMU,GACzCV,EAAKiB,KAAOtB,EACZK,EAAKU,KAAOA,EACZV,EAAKW,WAAaX,EAAKC,KACvBD,EAAKgB,UAAYhB,EAAKkB,aACflB,EAAKE,gBACLF,EAAKC,YACLD,EAAKkB,MA9DVC,CAA2BpB,EAAmBY,GAAaD,GAC3DL,EAAIL,KAAOW,OAEP,GAAIA,EAAWK,UAAW,CAE9B,IAAIA,EAAYL,EAAWK,UAC3B,KAAOA,EAAUA,WAChBA,EAAYA,EAAUA,UAEvBX,EAAIL,KAAO,CACViB,KAAMtB,EACNe,KAAAA,EACAC,WAAAA,EACAK,UAAWA,EAAUE,cAEfF,EAAUd,gBACVc,EAAUE,MACjBE,OAAOC,OAAOL,EAAWA,EAAUf,WAGnCK,KAAKO,WAAW,cAMjB,GAAIR,EAAIL,KAAKU,MAAQL,EAAIL,KAAKU,KAAKR,UAAYJ,EAAKwB,WAAWjB,EAAIL,KAAKU,KAAKR,UAAY,IAAM,CAC9F,MAAMF,EAAOK,EAAIL,KACjBK,EAAIL,KAAOA,EAAKU,KAChBL,EAAIL,KAAKkB,MAAQ,CAChBD,KAAMtB,EACNe,KAAMV,EAAKU,KAAKQ,MAChBP,WAAYX,EAAKW,WACjBK,UAAWhB,EAAKgB"}