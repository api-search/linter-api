"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.builtins = void 0;
const core = require("@stoplight/spectral-core");
const formats = require("@stoplight/spectral-formats");
const functions = require("@stoplight/spectral-functions");
const parsers = require("@stoplight/spectral-parsers");
const refResolver = require("@stoplight/spectral-ref-resolver");
const rulesets = require("@stoplight/spectral-rulesets");
const runtime = require("@stoplight/spectral-runtime");
function registerModule(id, members, overrides) {
    const actualOverrides = overrides[id];
    globalThis[Symbol.for(id)] = actualOverrides ? { ...members, ...actualOverrides } : members;
    const m = `globalThis[Symbol.for('${id}')]`;
    let code = '';
    for (const member of Object.keys(members)) {
        code += `export const ${member} = ${m}['${member}'];\n`;
    }
    return [id, code];
}
const builtins = (overrides = {}) => {
    const modules = Object.fromEntries([
        registerModule('@stoplight/spectral-core', core, overrides),
        registerModule('@stoplight/spectral-formats', formats, overrides),
        registerModule('@stoplight/spectral-functions', functions, overrides),
        registerModule('@stoplight/spectral-parsers', parsers, overrides),
        registerModule('@stoplight/spectral-ref-resolver', refResolver, overrides),
        registerModule('@stoplight/spectral-rulesets', rulesets, overrides),
        registerModule('@stoplight/spectral-runtime', runtime, overrides),
    ]);
    return {
        name: '@stoplight-spectral/builtins',
        resolveId(id) {
            if (id in modules) {
                return id;
            }
            return null;
        },
        load(id) {
            if (id in modules) {
                return modules[id];
            }
            return;
        },
    };
};
exports.builtins = builtins;
//# sourceMappingURL=builtins.js.map