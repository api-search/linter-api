---
rules:

  openapi-v3-info-contact:
    description: Ensures that all APIs have contact information.
    message: API must have a contact information available.
    given: $.info
    severity: error
    recommended: true
    type: style
    formats:
      - oas3
    then:
      field: contact
      function: truthy
  openapi-v3-do-not-use-api-for-base-path:
    description: Ensures that paths do not use /api as part of the base path.
    message: You should not use /api as part of your base path.
    severity: warn
    given: $.paths.*~
    then:
      function: pattern
      functionOptions:
        notMatch: ^/api
  openapi-v3-info-contact-email:
    description: Ensures that all APIs have contact email.
    message: API must have a contact email available.
    given: $.info.contact
    severity: error
    then:
      field: email
      function: truthy
  openapi-v3-info-contact-name:
    description: Ensures that all APIs have contact name.
    message: API must have a contact name available.
    given: $.info.contact
    severity: error
    then:
      field: name
      function: truthy
  openapi-v3-info-contact-url:
    description: Ensures that all APIs have contact URL.
    message: API must have a contact URL available.
    given: $.info.contact
    severity: error
    then:
      field: url
      function: truthy
  openapi-v3-info-description-max-length:
    description: Ensures that all APIs descriptions are under a specific length.
    message: The info object description should be less than 250 characters.
    given: $.info
    severity: error
    recommended: true
    type: style
    formats:
      - oas3
    then:
      field: description
      function: length
      functionOptions:
        max: 500
  openapi-v3-info-license:
    description: Ensures that all OpenAPIs have a information object license.
    message: The info object should have a license.
    given: $.info
    severity: error
    recommended: true
    type: style
    formats:
      - oas3
    then:
      field: license
      function: truthy
  openapi-v3-info-license-name:
    description: Ensures that all OpenAPIs have a information object license name.
    message: The info object should have a license name.
    given: $.info.license
    severity: error
    then:
      field: name
      function: truthy
  openapi-v3-info-license-url:
    description: Ensures that all OpenAPIs have a information object license url.
    message: The info object should have a license url.
    given: $.info.license
    severity: error
    then:
      field: url
      function: truthy
  openapi-v3-info-summary:
    description: Ensures that all OpenAPIs have a information object summary.
    message: The info object should have a summary.
    given: $.info
    severity: error
    recommended: true
    type: style
    formats:
      - oas3
    then:
      field: summary
      function: truthy
  openapi-v3-info-summary-max-length:
    description: Ensures that all OpenAPIs information object summary are not too long.
    message: The info object summary should be less than 50 characters.
    given: $.info
    severity: error
    recommended: true
    type: style
    formats:
      - oas3
    then:
      field: summary
      function: length
      functionOptions:
        max: 50
  openapi-v3-info-summary-word-check:
    description: Ensures that all OpenAPIs information object summary do not contain
      some words.
    message: The info object summary should not contain the words REST, Public, or
      Developer.
    given: $.info.summary
    severity: error
    recommended: true
    type: style
    formats:
      - oas3
    then:
      function: pattern
      functionOptions:
        notMatch: \b(REST|Public|Developer)\b
  openapi-v3-info-terms-of-service:
    description: Ensures that all OpenAPIs have a information object terms of service.
    message: The info object should have a terms of service.
    given: $.info
    severity: error
    recommended: true
    type: style
    formats:
      - oas3
    then:
      field: termsOfService
      function: truthy
  openapi-v3-info-title:
    description: Ensures that all OpenAPIs have a information object title.
    message: The info object should have a title.
    given: $.info
    severity: error
    recommended: true
    type: style
    formats:
      - oas3
    then:
      field: title
      function: truthy
  openapi-v3-info-title-upper-case:
    description: Ensures that all OpenAPIs information title are upper case.
    message: The info object title needs have the first letter of each word upper case.
    given: $.info.title
    then:
      function: pattern
      functionOptions:
        match: "^[A-Z][a-z]*(?: [A-Z][a-z]*)*$"
    type: style
    recommended: true
    formats:
      - oas3
    severity: error
  openapi-v3-info-title-max-length:
    description: Ensures that all OpenAPIs information titles are not longer than 50
      characters.
    message: The info object title should not be more than 50 characters.
    given: $.info
    severity: error
    recommended: true
    type: style
    formats:
      - oas3
    then:
      field: title
      function: length
      functionOptions:
        max: 50
  openapi-v3-info-title-word-check:
    description: Ensures that all OpenAPIs info object title do not contain certain words.
    message: The info object title should not contain the words REST, Public, and
      Developer.
    given: $.info.title
    severity: error
    recommended: true
    type: style
    formats:
      - oas3
    then:
      function: pattern
      functionOptions:
        notMatch: \b(REST|Public|Developer)\b
  openapi-v3-info-version:
    description: Ensures that all OpenAPIs have a information object version.
    message: The info object should have a version.
    given: $.info
    severity: error
    recommended: true
    type: style
    formats:
      - oas3
    then:
      field: version
      function: truthy
  openapi-v3-limit-number-of-paths:
    description: Ensures that there are not too many paths.
    message: There should be no more than 10 paths.
    severity: warn
    given: $.paths
    then:
      function: count-resource-types
      functionOptions:
        max: 10
  openapi-v3-limit-number-of-sub-resources:
    description: Ensures that there are not too many sub-resources.
    message: There should be no more than three levels of sub-resources.
    severity: warn
    given: $.paths.*~
    then:
      function: pattern
      functionOptions:
        match: ^/[^/]*((/{[^}]*})*/[^/]*(/{[^}]*})*){0,3}/?$
  openapi-v3-no-empty-paths:
    description: Ensures that there are no empty paths.
    message: There should be no empty paths.
    documentationUrl: https://opensource.zalando.com/restful-api-guidelines/#136
    severity: error
    given: $.paths.*~
    then:
      function: pattern
      functionOptions:
        notMatch: //
  openapi-v3-no-request-body-on-delete:
    description: Ensures that DELETE methods do not have request bodies.
    message: Your DELETE methods should not have request bodies.
    given: $.paths.*.delete
    recommended: true
    severity: error
    then:
      field: requestBody
      function: falsy
  openapi-v3-no-request-body-on-get:
    description: Ensures that GET methods do not have request bodies.
    message: Your GET methods should not have request bodies.
    given: $.paths.*.get
    recommended: true
    severity: error
    then:
      field: requestBody
      function: falsy
  openapi-v3-no-trailing-slash-on-paths:
    description: Ensures that there are no trailing slashes on paths.
    message: There should be no trailing slashes on paths.
    severity: error
    given: $.paths.*~
    then:
      function: pattern
      functionOptions:
        notMatch: /$
  openapi-v3-openapi-version:
    description: Ensuring that a specific version of OpenAPI is being used.
    message: You do not have the right version of OpenAPI.
    severity: error
    given: $
    then:
      field: openapi
      function: pattern
      functionOptions:
        match: 3.0.3
  openapi-v3-operations-description:
    description: Ensures that each of the operations have a description.
    message: Your operations all need descriptions.
    severity: error
    given: $.paths.*[get,post,patch,put,delete]
    then:
      - field: description
        function: truthy
  openapi-v3-operations-description-length:
    description: Ensures that the description for operations are not too long.
    message: Your operation descriptions should not be more than 250 characters.
    given: $.paths.*[get,post,patch,put,delete]
    recommended: true
    then:
      - field: description
        function: length
        functionOptions:
          max: 250
    type: style
  openapi-v3-operations-description-words-check:
    description: Ensures that the description do not contain certain words.
    message: Your operation descriptions should not use the words word, word, and word.
    given: $.paths.*[get,post,patch,put,delete].description
    recommended: true
    then:
      function: pattern
      functionOptions:
        notMatch: \b(word|word|word)\b
    type: style
  openapi-v3-operations-operation-ids-camel-case:
    description: Ensures that each of the operations IDs are camel case.
    message: Your operations IDs need to be camel case.
    given: $.paths.*[get,post,patch,put,delete].operationId
    recommended: true
    then:
      function: casing
      functionOptions:
        type: camel
    type: style
  openapi-v3-operations-summary:
    description: Ensures that each of the operations for an API have a summary.
    message: All of your operations need summaries.
    severity: error
    given: $.paths.*[get,post,patch,put,delete]
    then:
      - field: summary
        function: truthy
  openapi-v3-operations-summary-length:
    description: Ensures that each of the operations summaries are not too long.
    message: Your operations summaries can't be longer than 50 characters.
    given: $.paths.*[get,post,patch,put,delete]
    recommended: true
    then:
      - field: summary
        function: length
        functionOptions:
          max: 50
    type: style
  openapi-v3-operations-summary-period-none:
    severity: error
    description: Ensures that each of the operations summaries do not have an ending period.
    message: Your operations summaries should not end with a period.
    given: $.paths[*][*].summary
    then:
      function: pattern
      functionOptions:
        notMatch: \.$
  openapi-v3-operations-summary-words-check:
    description: Ensures that each of the operations summaries do not content certain words.
    message: Your operations summaries should not contain the words word, word, and
      word.
    given: $.paths.*[get,post,patch,put,delete].summary
    recommended: true
    then:
      function: pattern
      functionOptions:
        notMatch: \b(word|word|word)\b
    type: style
  openapi-v3-operations-tags:
    description: Ensures that each of the operations have a tags property.
    message: All of your operations need to have tags.
    severity: error
    given: $.paths.*[get,post,patch,put,delete]
    then:
      - field: tags
        function: truthy
  openapi-v3-operations-tags-one:
    description: Ensures that each of the operations have at least one tag.
    message: All of your operations need to have at least one tag.
    given: $
    severity: error
    then:
      field: tags
      function: length
      functionOptions:
        min: 1
    type: style
  openapi-v3-parameters-description:
    description: Ensures that that all parameters have a descriptions.
    message: Your parameters all need descriptions.
    given: $.paths.*.*.parameters[?(@.in=='query')]
    then:
      field: description
      function: truthy
  openapi-v3-parameters-description-length:
    description: Ensures that each of parameter description isn't too long.
    message: Your parameter descriptions can't be more than 500 characters.
    given: $.paths.*.*.parameters[?(@.in=='query')].description
    then:
      field: summary
      function: length
      functionOptions:
        max: 500
  openapi-v3-parameters-description-word-check:
    description: Ensures that some words aren't used in parameter descriptions.
    message: Your parameter descriptions can't contain the words word, word, and word.
    given: $.paths.*.*.parameters[?(@.in=='query')].description
    then:
      function: pattern
      functionOptions:
        notMatch: \b(word|word|word)\b
  openapi-v3-parameters-example:
    description: Ensures that that all parameters have a examples.
    message: Your parameters all need examples.
    given: $.paths.*.*.parameters[?(@.example=='query')]
    then:
      - field: example
        function: truthy
      - field: examples
        function: truthy
  openapi-v3-parameters-in:
    description: Ensures that that all parameters have an in property.
    message: Your parameters all need to have in properties.
    given: $.paths.*.*.parameters[?(@.in=='query')]
    then:
      field: in
      function: truthy
  openapi-v3-parameters-name:
    description: Ensures that that all parameters have a name.
    message: Your parameter should all have names.
    given: $.paths.*.*.parameters[?(@.in=='query')]
    then:
      field: name
      function: truthy
  openapi-v3-parameters-name-camel-case:
    description: Ensures that that all parameter names are camel case.
    message: Your parameter names should all be camel case.
    given: $.paths.*.*.parameters[?(@.in=='query')].name
    then:
      field: name
      function: casing
      functionOptions:
        type: camel
  openapi-v3-parameters-name-length:
    description: Ensures that that parameter names aren't too long.
    message: Your parameter names should not be longer than 25 characters.
    given: $.paths.*.*.parameters[?(@.in=='query')].name
    then:
      field: summary
      function: length
      functionOptions:
        max: 25
  openapi-v3-parameters-name-snake-case:
    description: Ensures that that all parameter names are snake case.
    message: Your parameter names should all be snake case.
    given: $.paths.*.*.parameters[?(@.in=='query')].name
    then:
      field: name
      function: casing
      functionOptions:
        type: snake
  openapi-v3-parameters-name-word-check:
    description: Ensures that that all some words aren't used for parameter names.
    message: Your parameter names should not contain the words word, word, and word.
    given: $.paths.*.*.parameters[?(@.in=='query')].name
    then:
      function: pattern
      functionOptions:
        notMatch: \b(word|word|word)\b
  openapi-v3-parameters-schema:
    description: Ensures that that all parameters have a schema.
    message: Your parameter should all have a schema defined.
    given: $.paths.*.*.parameters[?(@.in=='query')]
    then:
      field: schema
      function: truthy
  openapi-v3-parameters-schema-type:
    description: Ensures that that all parameters have a schema type.
    message: Your parameter should all schema types.
    given: $.paths.*.*.parameters[?(@.in=='query')].schema
    then:
      field: type
      function: truthy
  openapi-v3-parameters-schema-type-array:
    description: Ensures that that all parameters of schema type array have items defined.
    message: Your parameter schema should have an items property if it is an array.
    given: $.paths.*.*.parameters[?(@.in=='query')].schema[?(@.type=='array')]
    then:
      field: items
      function: truthy
  openapi-v3-request-body-json-media-type-on-patch:
    description: Ensures that PATCH methods have request bodies.
    message: Your PATCH methods should have request bodies.
    given: $.paths.*.patch[requestBody].content
    recommended: true
    severity: error
    then:
      field: application/json
      function: truthy
  openapi-v3-request-body-json-media-type-on-post:
    description: Ensures that POST methods have request bodies.
    message: Your POST methods should have request bodies.
    given: $.paths.*.post[requestBody].content
    recommended: true
    severity: error
    then:
      field: application/json
      function: truthy
  openapi-v3-request-body-json-media-type-on-put:
    description: Ensures that PUT methods have request bodies.
    message: Your PUT methods should have request bodies.
    given: $.paths.*.put[requestBody].content
    recommended: true
    severity: error
    then:
      field: application/json
      function: truthy
  openapi-v3-request-body-on-patch:
    description: Ensures that PATCH methods have request bodies.
    message: Your PATCH methods should have request bodies.
    given: $.paths.*.patch
    recommended: true
    severity: error
    then:
      field: requestBody
      function: truthy
  openapi-v3-request-body-on-post:
    description: Ensures that POST methods have request bodies.
    message: Your POST methods should have request bodies.
    given: $.paths.*.post
    recommended: true
    severity: error
    then:
      field: requestBody
      function: truthy
  openapi-v3-request-body-on-put:
    description: Ensures that PUT methods have request bodies.
    message: Your PUT methods should have request bodies.
    given: $.paths.*.put
    recommended: true
    severity: error
    then:
      field: requestBody
      function: truthy
  openapi-v3-response-delete-204-no-body:
    description: Ensures DELETE operations do not have a response body.
    message: A DELETE operation should not have a response body.
    severity: error
    given: $paths.delete.responses.204
    then:
      field: content
      function: falsy
  openapi-v3-response-delete-204-problem-json-media-type:
    description: Ensuring DELETE operations have an application/problem+json media
      type for 500 responses.
    message: A DELETE operation should have an application/problem+json media type
      for 500 response.
    severity: error
    given: $paths.delete.responses.500.content
    then:
      field: application/problem+json
      function: truthy
  openapi-v3-response-delete-204-status-code:
    description: Ensures DELETE operations have a 204 status code response.
    message: A DELETE operation should have a 204 status code for the response.
    severity: warn
    formats:
      - oas2
      - oas3
    given: $.paths[*].delete.responses
    then:
      field: "204"
      function: truthy
  openapi-v3-response-delete-500-status-code:
    description: Ensures DELETE operations have a 500 status code response.
    message: A DELETE operation should have a 500 status code for the response.
    severity: warn
    formats:
      - oas2
      - oas3
    given: $.paths[*].delete.responses
    then:
      field: "500"
      function: truthy
  openapi-v3-response-get-200-media-type:
    description: Ensuring GET operations have an application/json media type for 200
      responses.
    message: A GET operation should have an application/json media type for 200
      response.
    severity: error
    given: $paths.get.responses.200.content
    then:
      field: application/json
      function: truthy
  openapi-v3-response-get-200-status-code:
    description: Ensures GET operations have a 200 status code response.
    message: A GET operation should have a 200 status code for the response.
    severity: warn
    formats:
      - oas2
      - oas3
    given: $.paths[*].get.responses
    then:
      field: "200"
      function: truthy
  openapi-v3-response-get-500-status-code:
    description: Ensures GET operations have a 500 status code response.
    message: A GET operation should have a 500 status code for the response.
    severity: warn
    formats:
      - oas2
      - oas3
    given: $.paths[*].get.responses
    then:
      field: "500"
      function: truthy
  openapi-v3-response-patch-204-no-body:
    description: Ensures PATCH operations do not have a response body.
    message: A PATCH operation should not have a response body.
    severity: error
    given: $paths.patch.responses.204
    then:
      field: content
      function: falsy
  openapi-v3-response-patch-204-problem-json-media-type:
    description: Ensuring PATCH operations have an application/problem+json media
      type for 500 responses.
    message: A PATCH operation should have an application/problem+json media type
      for 500 response.
    severity: error
    given: $paths.patch.responses.500.content
    then:
      field: application/problem+json
      function: truthy
  openapi-v3-response-patch-204-status-code:
    description: Ensures PATCH operations have a 204 status code response.
    message: A PATCH operation should have a 204 status code for the response.
    severity: warn
    formats:
      - oas2
      - oas3
    given: $.paths[*].delete.responses
    then:
      field: "204"
      function: truthy
  openapi-v3-response-patch-500-status-code:
    description: Ensures PATCH operations have a 500 status code response.
    message: A PATCH operation should have a 500 status code for the response.
    severity: warn
    formats:
      - oas2
      - oas3
    given: $.paths[*].patch.responses
    then:
      field: "500"
      function: truthy
  openapi-v3-response-post-201-media-type:
    severity: error
    description: POST responses should have a JSON body.
    given: $paths.post.responses.201.content
    then:
      field: application/json
      function: truthy
  openapi-v3-response-post-201-status-code:
    description: Ensures POST operations have a 201 status code response.
    message: A POST operation should have a 201 status code for the response.
    severity: warn
    formats:
      - oas3
    given: $.paths[*].post.responses
    then:
      field: "201"
      function: truthy
  openapi-v3-response-get-500-problem-json-media-type:
    description: Ensuring POST operations have an application/problem+json media
      type for 500 responses.
    message: A POST operation should have an application/problem+json media type for
      500 response.
    severity: error
    given: $paths.post.responses.500.content
    then:
      field: application/problem+json
      function: truthy
  openapi-v3-response-post-500-status-code:
    description: Ensures POST operations have a 500 status code response.
    message: A POST operation should have a 500 status code for the response.
    severity: warn
    formats:
      - oas2
      - oas3
    given: $.paths[*].post.responses
    then:
      field: "500"
      function: truthy
  openapi-v3-response-put-204-no-body:
    description: Ensures PUT operations do not have a response body.
    message: A PUT operation should not have a response body.
    severity: error
    given: $paths.put.responses.204
    then:
      field: content
      function: falsy
  openapi-v3-response-put-204-problem-json-media-type:
    description: Ensuring PUT operations have an application/problem+json media type
      for 500 responses.
    message: A PUT operation should have an application/problem+json media type for
      500 response.
    severity: error
    given: $paths.put.responses.500.content
    then:
      field: application/problem+json
      function: truthy
  openapi-v3-response-put-204-status-code:
    description: Ensures PUT operations have a 204 status code response.
    message: A PUT operation should have a 204 status code for the response.
    severity: warn
    formats:
      - oas2
      - oas3
    given: $.paths[*].delete.responses
    then:
      field: "204"
      function: truthy
  openapi-v3-response-put-500-status-code:
    description: Ensures PUT operations have a 500 status code response.
    message: A PUT operation should have a 500 status code for the response.
    severity: warn
    formats:
      - oas2
      - oas3
    given: $.paths[*].put.responses
    then:
      field: "500"
      function: truthy
  openapi-v3-response-rate-limit-headers:
    description: Ensures that all OpenAPIs have rate limiting headers applied.
    message: You need to be using rate limiting headers.
    formats:
      - oas3
    severity: warn
    recommended: true
    given: $.[responses][?(@property[0] == "2" )][headers]
    then:
      - functionOptions:
          properties:
            - X-RateLimit-Limit
            - RateLimit-Limit
        function: xor
      - functionOptions:
          properties:
            - X-RateLimit-Remaining
            - RateLimit-Remaining
        function: xor
      - functionOptions:
          properties:
            - X-RateLimit-Reset
            - RateLimit-Reset
        function: xor
  openapi-v3-responses-examples:
    description: Ensuring all responses have examples defined.
    message: All your responses need to have examples defined.
    severity: error
    given: $..responses..[?(@property !== 'properties' && @.examples)]
    then:
      function: schemaPath
      functionOptions:
        field: $.examples.*.value
        schemaPath: $.schema
  openapi-v3-responses-schema-object:
    description: Ensuring all responses have a schema defined.
    message: All your responses need to have a schema defined.
    severity: error
    given: $.paths.*.*[responses]..content..schema
    then:
      function: is-object-schema
  openapi-v3-schema-additional-properties:
    description: Restricts objects from having additional properties defined.
    message: All schema objects should have additionalProperties set to false.
    formats:
      - oas3
    severity: warn
    recommended: true
    given:
      - $.[?(@.type=="object" && @.additionalProperties &&
        @.additionalProperties!=true && @.additionalProperties!=false )]
    then:
      - field: maxProperties
        function: defined
  openapi-v3-schema-description:
    description: Ensure all schema properties should have a description.
    message: All schema should have descriptions.
    severity: warn
    formats:
      - oas3
    given: $.components.schemas.*
    then:
      field: description
      function: truthy
  openapi-v3-schema-description-length:
    description: All schemas descriptions should be shorter than 20 characters.
    message: Description needs to be less than 20 characters.
    severity: warn
    formats:
      - oas3
    given: $.components.schemas.*
    then:
      field: description
      function: length
      functionOptions:
        max: 20
  openapi-v3-schema-description-words:
    description: Some words should not be be contained within the schema description.
    message: Do not use the words word, word, and word in the schema descriptions.
    severity: warn
    formats:
      - oas3
    given: $.components.schemas.*
    then:
      field: description
      function: pattern
      functionOptions:
        notMatch: \b(word|word|word)\b
  openapi-v3-schema-names-camel-case:
    description: Ensure all schema names are camel case.
    message: Schema names should be camel case.
    severity: error
    given: $.components.schemas
    then:
      field: "@key"
      function: casing
      functionOptions:
        type: camel
  openapi-v3-schema-names-length:
    description: Ensure schema names should be no more than 25 characters.
    message: All schema names should be less than 25 characters.
    severity: error
    given: $.components.schemas
    then:
      field: "@key"
      function: length
      functionOptions:
        max: 25
  openapi-v3-schema-names-words:
    description: Schema names should not contain certain words.
    message: Schema property names not contains the words word, word, and word.
    severity: error
    given: $.components.schemas
    then:
      field: "@key"
      function: pattern
      functionOptions:
        notMatch: \b(word|word|word)\b
  openapi-v3-schema-properties:
    description: Ensuring that all schema should have properties.
    message: All of your schema need to have properties.
    severity: error
    formats:
      - oas3
    given: $.components.schemas.*
    then:
      field: properties
      function: truthy
  openapi-v3-schema-properties-allowed-integer-format:
    description: Requires integer properties to have a format of int32 or int64.
    message: Type format should be be int32 or int64.
    formats:
      - oas3
    severity: hint
    recommended: true
    given: $..properties.[?(@.type=="integer")]
    then:
      field: format
      function: enumeration
      functionOptions:
        values:
          - int32
          - int64
  openapi-v3-schema-properties-allowed-number-format:
    description: Ensure only allowed number formats.
    message: You must have format property of decimal32, decimal64, float, double,
      decimal128
    formats:
      - oas3
    severity: hint
    recommended: true
    given: $..properties.[?(@.type=="number")]
    then:
      field: format
      function: enumeration
      functionOptions:
        values:
          - decimal32
          - decimal64
          - float
          - double
          - decimal128
  openapi-v3-schema-properties-define-array-boundaries:
    description: Requires that arrays have their minimum and maximum boundaries defined.
    message: Arrays must have minItems and maxItems defined.
    formats:
      - oas3
    severity: warn
    recommended: true
    given:
      - $..properties.[?(@.type=="array")]
    then:
      - field: maxItems
        function: defined
      - field: minItems
        function: defined
  openapi-v3-schema-properties-define-number-boundaries:
    description: Ensures that all number properties have boundaries defined.
    message: Numeric types need to have a minimum and maximum property defined.
    formats:
      - oas3
    severity: warn
    recommended: true
    given:
      - $..properties.[?(@.type=="number")]
      - $..properties.[?(@.type=="integer")]
    then:
      - field: maximum
        function: defined
      - field: minimum
        function: defined
  openapi-v3-schema-properties-descriptions:
    description: Ensure that all schemas properties should have a description.
    message: All schema properties should have descriptions.
    severity: warn
    formats:
      - oas3
    given: $..properties.*
    then:
      field: description
      function: truthy
  openapi-v3-schema-properties-descriptions-length:
    description: Ensure that schema descriptions aren't too long.
    message: The schema description length needs to be less than 250 characters.
    severity: warn
    formats:
      - oas3
    given: $..properties.*
    then:
      field: description
      function: length
      functionOptions:
        max: 250
  openapi-v3-schema-properties-descriptions-words:
    description: Some words should not exist within the property description.
    message: Schema property descriptions should not contain the words word, word,
      and word.
    severity: warn
    formats:
      - oas3
    given: $..properties.*
    then:
      field: description
      function: pattern
      functionOptions:
        notMatch: \b(word|word|word)\b
  openapi-v3-schema-properties-names-camel-case:
    description: Ensuring that schema property names are camel case.
    message: All schema property names should be camel case.
    severity: error
    given: $..properties.*
    then:
      field: "@key"
      function: casing
      functionOptions:
        type: camel
  openapi-v3-schema-properties-names-length:
    description: Ensuring that property names are no more than 25 characters.
    message: Schema property names should be less than 25 characters .
    severity: error
    given: $..properties.*
    then:
      field: "@key"
      function: length
      functionOptions:
        max: 25
  openapi-v3-schema-properties-names-words:
    description: Schema property names should not contain certain words.
    message: Schema property names should not contain the words word, word, and word.
    severity: error
    given: $..properties.*
    then:
      field: "@key"
      function: pattern
      functionOptions:
        notMatch: \b(word|word|word)\b
  openapi-v3-schema-properties-type:
    description: Ensuring that all schemas properties should have a type.
    message: All schema properties should have type property.
    severity: warn
    formats:
      - oas3
    given: $..properties.*
    then:
      field: type
      function: truthy
  openapi-v3-schema-required:
    description: Ensuring that all schema have a required property.
    message: All of your schema need to have a required property.
    severity: warn
    formats:
      - oas3
    given: $.components.schemas.*
    then:
      field: required
      function: truthy
  openapi-v3-schema-type:
    description: Ensuring that all schema have a type property.
    message: All schema should have a type property.
    severity: error
    formats:
      - oas3
    given: $.components.schemas.*
    then:
      field: type
      function: truthy
  openapi-v3-tags-description:
    description: Ensuring that all tags have a description.
    message: All tags should have a description.
    given: $.tags[*]
    severity: error
    then:
      field: description
      function: truthy
  openapi-v3-tags-name:
    description: Ensuring that all tags have a name.
    message: All tags should have a name.
    given: $.tags[*]
    severity: error
    then:
      field: name
      function: truthy
  openapi-v3-tags-object:
    description: Ensuring that there are tags being applied.
    message: You should have a central tags object.
    given: $
    severity: error
    then:
      field: tags
      function: truthy
  openapi-v3-tags-one:
    description: Ensuring that there is at least on tag being applied.
    message: You should have at least one tag.
    given: $
    severity: error
    then:
      field: tags
      function: length
      functionOptions:
        min: 1
    type: style
  openapi-v3-trailing-slash-on-paths:
    description: Ensures that there are trailing slashes on paths.
    message: There should be trailing slashes on paths.
    severity: error
    given: $.paths.*~
    then:
      function: pattern
      functionOptions:
        match: /$
  openapi-v3-use-of-response-schema-anyof:
    description: Checks to see if anyOf is being used as part of each schema.
    message: You should avoid using anyOf as part of your schema.
    given: $.paths.*.*[responses]..content..schema
    severity: warn
    formats:
      - oas3
    then:
      field: anyOf
      function: falsy
  openapi-v3-use-of-response-schema-oneof:
    description: Checks to see if oneOf is being used as part of each schema.
    message: You should avoid using oneOf as part of your schema.
    given: $.paths.*.*[responses]..content..schema
    severity: warn
    formats:
      - oas3
    then:
      field: oneOf
      function: falsy
  openapi-v3-version-semantic:
    description: Ensuring that semantic versioning is being used.
    message: You need to provide a semantic version.
    severity: error
    recommended: true
    given: $.info.version
    then:
      function: pattern
      functionOptions:
        match: ^[0-9]+.[0-9]+.[0-9]+(-[a-z0-9+.-]+)?
  openapi-v3-have-request-body-examples:
    severity: error
    description: Ensures that a example is always present for each request body.
    message: All request bodies should have an example present.
    given: $.paths.*.*.requestBody..[?(@.items)][?(@.type == 'object')]
    formats:
      - oas3
    then:
      - field: example
        function: truthy
  openapi-v3-info-description:
    description: Ensures that all OpenAPIs have a information description.
    message: The info object should have a description.
    given: $.info
    severity: error
    recommended: true
    type: style
    formats:
      - oas3
    then:
      field: description
      function: truthy
  openapi-v3-info-description-word-check:
    description: Ensures that all APIs descriptions do not contain certain words.
    message: The info object description cannot contain the words REST, public,
      developer.
    given: $.info.description
    severity: error
    recommended: true
    type: style
    formats:
      - oas3
    then:
      function: pattern
      functionOptions:
        notMatch: \b(REST|Public|Developer)\b
  openapi-v3-request-body-examples-components:
    description: Check request bodies examples to ensure that they only have
      references to components.
    message: Request bodies examples should only reference components.
    severity: error
    resolved: false
    given:
      - $..requestBody.content..*.examples.$ref
    then:
      function: pattern
      functionOptions:
        match: "#/components/"
  openapi-v3-request-body-schema-components:
    description: Check request body schena to ensure that they only have references
      to components.
    message: Request body schema should only reference components.
    severity: error
    resolved: false
    given:
      - $..requestBody.content..*.schema.$ref
    then:
      function: pattern
      functionOptions:
        match: "#/components/"
  openapi-v3-responses-examples-components:
    description: Check response examples to ensure that they only have references to
      components.
    message: Response examples should only reference components.
    severity: error
    resolved: false
    given:
      - $..responses.*.content..*.examples.$ref
    then:
      function: pattern
      functionOptions:
        match: "#/components/"
  openapi-v3-responses-schema-components:
    description: Check response schema to ensure that they only have references to
      components.
    message: Response schema should only reference components.
    severity: error
    resolved: false
    given:
      - $..responses.*.content..*.schema.$ref
    then:
      function: pattern
      functionOptions:
        match: "#/components/"
  openapi-v3-security-scheme-access-token:
    description: Requires the usage of access token for security scheme.
    message: Must add access token for security scheme.
    given: $.components.securitySchemes[Oidc.AccessToken]
    severity: error
    then:
      field: type
      function: pattern
      functionOptions:
        match: ^openIdConnect$
  owasp:api1:2019-no-numeric-ids:
    description: OWASP API1:2019 - Use random IDs that cannot be guessed. UUIDs are
      preferred.
    severity: error
    given: $.paths..parameters[*][?(@property === "name" && (@ === "id" ||
      @.match(/(_id|Id|-id)$/)))]^.schema
    then:
      function: schema
      functionOptions:
        schema:
          type: object
          not:
            properties:
              type:
                const: integer
          properties:
            format:
              const: uuid
  owasp:api2:2019-no-http-basic:
    message: Security scheme uses HTTP Basic. Use a more secure authentication
      method, like OAuth 2.0.
    description: Basic authentication credentials transported over network are more
      susceptible to interception than other forms of authentication, and as
      they are not encrypted it means passwords and tokens are more easily
      leaked.
    severity: error
    given: $.components.securitySchemes[*]
    then:
      field: scheme
      function: pattern
      functionOptions:
        notMatch: basic
  owasp:api2:2019-no-api-keys-in-url:
    message: "ApiKey passed in URL: {{error}}."
    description: |-
      API Keys are (usually opaque) strings that
      are passed in headers, cookies or query parameters
      to access APIs.
      Those keys can be eavesdropped, especially when they are stored
      in cookies or passed as URL parameters.
      ```
      security:
      - ApiKey: []
      paths:
        /books: {}
        /users: {}
      securitySchemes:
        ApiKey:
          type: apiKey
          in: cookie
          name: X-Api-Key
      ```
    severity: error
    formats:
      - oas3
    given:
      - $..[securitySchemes][?(@ && @.type=="apiKey")].in
    then:
      - function: pattern
        functionOptions:
          notMatch: ^(path|query)$
  owasp:api2:2019-no-credentials-in-url:
    message: "Security credentials detected in path parameter: {{value}}."
    description: URL parameters MUST NOT contain credentials such as API key,
      password, or secret. See
      [RAC_GEN_004](https://docs.italia.it/italia/piano-triennale-ict/lg-modellointeroperabilita-docs/it/bozza/doc/04_Raccomandazioni%20di%20implementazione/04_raccomandazioni-tecniche-generali/01_globali.html?highlight=credenziali#rac-gen-004-non-passare-credenziali-o-dati-riservati-nellurl)
    severity: error
    formats:
      - oas3
    given:
      - $..parameters[?(@ && @.in && (@.in == "query" || @.in == "path"))].name
    then:
      - field: name
        function: pattern
        functionOptions:
          notMatch: /^.*(client_?secret|token|access_?token|refresh_?token|id_?token|password|secret|api-?key).*$/i
  owasp:api2:2019-auth-insecure-schemes:
    message: "Authentication scheme is considered outdated or insecure: {{value}}."
    description: There are many [HTTP authorization
      schemes](https://www.iana.org/assignments/http-authschemes/) but some of
      them are now considered insecure, such as negotiating authentication using
      specifications like NTLM or OAuth v1.
    severity: error
    formats:
      - oas3
    given:
      - $..[securitySchemes][?(@.type=="http")].scheme
    then:
      - function: pattern
        functionOptions:
          notMatch: ^(negotiate|oauth)$
  owasp:api2:2019-jwt-best-practices:
    message: Security schemes using JWTs must explicitly declare support for RFC8725
      in the description.
    description: >-
      JSON Web Tokens RFC7519 is a compact, URL-safe, means of
      representing claims to be transferred between two parties. JWT can be
      enclosed in encrypted or signed tokens like JWS and JWE.


      The [JOSE IANA registry](https://www.iana.org/assignments/jose/jose.xhtml) provides algorithms information.


      RFC8725 describes common pitfalls in the JWx specifications and in

      their implementations, such as:

      - the ability to ignore algorithms, eg. `{"alg": "none"}`;

      - using insecure algorithms like `RSASSA-PKCS1-v1_5` eg. `{"alg": "RS256"}`.

      An API using JWT should explicit in the `description`

      that the implementation conforms to RFC8725.
    severity: error
    given:
      - $..[securitySchemes][?(@ && @.type=="oauth2")]
      - $..[securitySchemes][?(@ && (@.bearerFormat=="jwt" ||
        @.bearerFormat=="JWT"))]
    then:
      - field: description
        function: truthy
      - field: description
        function: pattern
        functionOptions:
          match: .*RFC8725.*
  owasp:api2:2019-protection-global-unsafe:
    message: This operation is not protected by any security scheme.
    description: >-
      Your API should be protected by a `security` rule either at global
      or operation level. All operations should be protected especially when
      they

      not safe (methods that do not alter the state of the server)

      HTTP methods like `POST`, `PUT`, `PATCH` and `DELETE`.

      This is done with one or more non-empty `security` rules.


      Security rules are defined in the `securityScheme` section.
    severity: error
    given: $
    then:
      - function: checkSecurity
        functionOptions:
          schemesPath:
            - securitySchemes
          nullable: true
          methods:
            - post
            - put
            - patch
            - delete
  owasp:api2:2019-protection-global-unsafe-strict:
    message: This operation is not protected by any security scheme.
    description: |-
      Check if the operation is protected at operation level.
      Otherwise, check the global `#/security` property.
    severity: info
    given: $
    then:
      - function: checkSecurity
        functionOptions:
          schemesPath:
            - securitySchemes
          nullable: false
          methods:
            - post
            - patch
            - delete
            - put
  owasp:api2:2019-protection-global-safe:
    message: This operation is not protected by any security scheme.
    description: |-
      Check if the operation is protected at operation level.
      Otherwise, check the global `#/security` property.
    severity: info
    given: $
    then:
      - function: checkSecurity
        functionOptions:
          schemesPath:
            - securitySchemes
          nullable: true
          methods:
            - get
            - head
  owasp:api3:2019-define-error-validation:
    message: Missing error validation response of either 400 or 422.
    description: Carefully define schemas for all the API responses, including
      either 400 or 422 responses which describe errors caused by invalid
      requests.
    severity: warn
    given: $.paths..responses
    then:
      - function: schema
        functionOptions:
          schema:
            type: object
            oneOf:
              - required:
                  - "400"
              - required:
                  - "422"
  owasp:api3:2019-define-error-responses-401:
    message: Operation is missing {{property}}.
    description: OWASP API Security recommends defining schemas for all responses,
      even errors. The 401 describes what happens when a request is
      unauthorized, so its important to define this not just for documentation,
      but to empower contract testing to make sure the proper JSON structure is
      being returned instead of leaking implementation details in backtraces.
    severity: warn
    given: $.paths..responses
    then:
      - field: "401"
        function: truthy
      - field: 401.content
        function: truthy
  owasp:api3:2019-define-error-responses-500:
    message: Operation is missing {{property}}.
    description: OWASP API Security recommends defining schemas for all responses,
      even errors. The 500 describes what happens when a request fails with an
      internal server error, so its important to define this not just for
      documentation, but to empower contract testing to make sure the proper
      JSON structure is being returned instead of leaking implementation details
      in backtraces.
    severity: warn
    given: $.paths..responses
    then:
      - field: "500"
        function: truthy
      - field: 500.content
        function: truthy
  owasp:api4:2019-rate-limit:
    message: All 2XX and 4XX responses should define rate limiting headers.
    description: >-
      Define proper rate limiting to avoid attackers overloading the API.
      There are many ways to implement rate-limiting, but most of them involve
      using HTTP headers, and there are two popular ways to do that:


      IETF Draft HTTP RateLimit Headers:. https://datatracker.ietf.org/doc/draft-ietf-httpapi-ratelimit-headers/


      Customer headers like X-Rate-Limit-Limit (Twitter: https://developer.twitter.com/en/docs/twitter-api/rate-limits) or X-RateLimit-Limit (GitHub: https://docs.github.com/en/rest/overview/resources-in-the-rest-api)
    severity: error
    formats:
      - oas3
    given: $.paths[*]..responses[?(@property.match(/^(2|4)/))]
    then:
      field: headers
      function: schema
      functionOptions:
        schema:
          type: object
          oneOf:
            - required:
                - RateLimit-Limit
                - RateLimit-Reset
            - required:
                - X-RateLimit-Limit
            - required:
                - X-Rate-Limit-Limit
  owasp:api4:2019-rate-limit-retry-after:
    message: A 429 response should define a Retry-After header.
    description: Define proper rate limiting to avoid attackers overloading the API.
      Part of that involves setting a Retry-After header so well meaning
      consumers are not polling and potentially exacerbating problems.
    severity: error
    formats:
      - oas3
    given: $..responses[429].headers
    then:
      field: Retry-After
      function: defined
  owasp:api4:2019-rate-limit-responses-429:
    message: Operation is missing rate limiting response in {{property}}.
    description: OWASP API Security recommends defining schemas for all responses,
      even errors. A HTTP 429 response signals the API client is making too many
      requests, and will supply information about when to retry so that the
      client can back off calmly without everything breaking. Defining this
      response is important not just for documentation, but to empower contract
      testing to make sure the proper JSON structure is being returned instead
      of leaking implementation details in backtraces. It also ensures your
      API/framework/gateway actually has rate limiting set up.
    severity: warn
    given: $.paths..responses
    then:
      - field: "429"
        function: truthy
      - field: 429.content
        function: truthy
  owasp:api4:2019-array-limit:
    message: Schema of type array must specify maxItems.
    description: Array size should be limited to mitigate resource exhaustion
      attacks. This can be done using `maxItems`. You should ensure that the
      subschema in `items` is constrained too.
    severity: error
    given: "#ArrayProperties"
    then:
      field: maxItems
      function: defined
  owasp:api4:2019-string-limit:
    message: Schema of type string must specify maxLength.
    description: String size should be limited to mitigate resource exhaustion
      attacks. This can be done using `maxLength`.
    severity: error
    given: "#StringProperties"
    then:
      field: maxLength
      function: defined
  owasp:api4:2019-string-restricted:
    message: Schema of type string must specify a format or pattern.
    description: To avoid unexpected values being sent or leaked, ensure that
      strings have either a format or a RegEx pattern. This can be done using
      `format` or `pattern`.
    severity: error
    given: "#StringProperties"
    then:
      function: schema
      functionOptions:
        schema:
          type: object
          oneOf:
            - required:
                - format
            - required:
                - pattern
  owasp:api4:2019-integer-limit:
    message: Schema of type integer must specify minimum and maximum.
    description: "Integers should be limited to mitigate resource exhaustion
      attacks. This can be done using `minimum` and `maximum`, which can with
      e.g.: avoiding negative numbers when positive are expected, or reducing
      unreasonable iterations like doing something 1000 times when 10 is
      expected."
    severity: error
    formats:
      - oas3_1
    given: "#IntegerProperties"
    then:
      - function: xor
        functionOptions:
          properties:
            - minimum
            - exclusiveMinimum
      - function: xor
        functionOptions:
          properties:
            - maximum
            - exclusiveMaximum
  owasp:api4:2019-integer-format:
    message: Schema of type integer must specify format (int32 or int64).
    description: Integers should be limited to mitigate resource exhaustion attacks.
      Specifying whether int32 or int64 is expected via `format`.
    severity: error
    given: "#IntegerProperties"
    then:
      - field: format
        function: defined
  owasp:api6:2019-no-additionalProperties:
    message: If the additionalProperties keyword is used it must be set to false.
    description: "By default JSON Schema allows additional properties, which can
      potentially lead to mass assignment issues, where unspecified fields are
      passed to the API without validation. Disable them with
      `additionalProperties: false` or add `maxProperties`."
    severity: warn
    formats:
      - oas3
    given: $..[?(@ && @.type=="object" && @.additionalProperties)]
    then:
      - field: additionalProperties
        function: falsy
  owasp:api6:2019-constrained-additionalProperties:
    message: Objects should not allow unconstrained additionalProperties.
    description: "By default JSON Schema allows additional properties, which can
      potentially lead to mass assignment issues, where unspecified fields are
      passed to the API without validation. Disable them with
      `additionalProperties: false` or add `maxProperties`"
    severity: warn
    formats:
      - oas3
    given: $..[?(@ && @.type=="object" && @.additionalProperties
      &&  @.additionalProperties!=true &&  @.additionalProperties!=false )]
    then:
      - field: maxProperties
        function: defined
  owasp:api7:2019-security-hosts-https-oas3:
    message: Server URLs MUST begin https://, and no other protocol is permitted.
    description: "All server interactions MUST use the https protocol, meaning
      server URLs should begin `https://`. Learn more about the importance of
      TLS (over SSL) here:
      https://cheatsheetseries.owasp.org/cheatsheets/Transport_Layer_Protection\
      _Cheat_Sheet.html"
    severity: error
    formats:
      - oas3
    given: $.servers..url
    then:
      function: pattern
      functionOptions:
        match: /^https:/
  products-specs-openapi:
    description: All RESTful API use OpenAPI as the specification.
    message: The RESTful API specification should use OpenAPI.
    given: $.specs
    severity: error
    recommended: true
    type: style
    formats:
      - products
    then:
      field: type
      function: truthy
  openapi-v3-root-path-discovery:
    description: Need
    message: Need
    documentationUrl: https://example.com
    severity: error
    given: $.paths
    then:
      function: pattern
      functionOptions:
        Match: /
